{% set name = "autogluon" %}
{% set version = "1.1.1" %}

{% set boto3 = ">=1.10,<2" %}
{% set numpy = ">=1.21,<1.29" %}
{% set pandas =  ">=2.0.0,<2.3.0" %}
{% set scikit_learn = ">=1.3.0,<1.4.1" %}
{% set scipy = ">=1.5.4,<1.13" %}
{% set psutil = ">=5.7.3,<6" %}
{% set s3fs = ">=2023.1,<2025" %}
{% set networkx = ">=3.0,<4" %}
{% set tqdm = ">=4.38,<5" %}
{% set Pillow = ">=10.0.1,<11" %}
{% set pytorch = ">=2.2,<2.4" %}
{% set lightning = ">=2.2,<2.4" %}
{% set async_timeout = ">=4.0,<5" %}
{% set transformers = ">=4.38.0,<4.41.0" %}
{% set sentencepiece = "!=0.1.92,>=0.1.91" %}
{% set huggingface_accelerate = ">=0.21.0,<0.22.0" %}

package:
  name: {{ name }}-suite
  version: {{ version }}

source:
  - url: https://github.com/{{ name }}/{{ name }}/archive/refs/tags/v{{ version }}.tar.gz
    sha256: 54eb1b144cbf6980d6fb34d1ccb870f486c3ed9086d9d6e1ff84554e5cab858a
    patches:
      - patches/0001-Disable-mypy-pytest-plugin.patch
      - patches/0002-Adjust-multimodal-requirements-in-setup.py.patch
      - patches/0003-Increase-ray-upperbound.patch
      - patches/0004-Replace-lightning-pytorch-imports.patch
      - patches/0005-Remove-lightning-from-setup.patch

build:
  # A couple of dependencies are not available on linux-s390x.
  # We skip osx-64 because our pytorch 2+ builds on osx-64 require openblas while our
  # scikit-learn builds require mkl. Both are mutually exclusive.
  # We skip win-64 because pytesseract (and tesseract) are not built for win-64.
  skip: true  # [py<38 or py>=312 or s390x or (osx and x86_64) or win]
  number: 0

requirements:
  build:
    - patch  # [not win]
    - m2-patch  # [win]
  # Adding top-level host section to prevent conda-build crash
  host:
    - python

outputs:
  - name: {{ name }}
    build:
      script: python -m pip install ./autogluon -v --no-deps --no-build-isolation
      script_env:
        RELEASE=1
    requirements:
      host:
        - python
        - pip
        - setuptools
        - wheel
      run:
        - python
        - {{ pin_subpackage('autogluon.core', exact=True) }}
        - {{ pin_subpackage('autogluon.features', exact=True) }}
        - {{ pin_subpackage('autogluon.tabular', exact=True) }}
        - {{ pin_subpackage('autogluon.multimodal', exact=True) }}
        - {{ pin_subpackage('autogluon.timeseries', exact=True) }}
    test:
      imports:
        - autogluon
        - autogluon.core
        - autogluon.features
        - autogluon.tabular
        - autogluon.multimodal
        - autogluon.timeseries
      requires:
        - pip
      commands:
        - pip check

  - name: {{ name }}.common
    build:
      script: python -m pip install ./common -v --no-deps --no-build-isolation
      script_env:
        RELEASE=1
    requirements:
      host:
        - python
        - pip
        - setuptools
        - wheel
      run:
        - python
        - numpy {{ numpy }}
        - pandas {{ pandas }}
        - boto3 {{ boto3 }}
        - psutil {{ psutil }}
        - tqdm {{ tqdm }}
    test:
      source_files:
        - common/tests
      imports:
        - autogluon.common
        - autogluon.common.space
      requires:
        - python
        - pip
        - pytest
      commands:
        - pip check
        - cd common
        # Skip test_check_style because it runs linters. We don't need to run linters.
        - pytest -v tests -k "not test_check_style"
        - python -c "import autogluon.common.version; assert autogluon.common.version.__version__ == '{{ version }}'"

  - name: {{ name }}.core
    build:
      script: python -m pip install ./core -v --no-deps --no-build-isolation
      script_env:
        RELEASE=1
    requirements:
      host:
        - python
        - pip
        - setuptools
        - wheel
      run:
        - python
        - numpy {{ numpy }}
        - scipy {{ scipy }}
        - scikit-learn {{ scikit_learn }}
        - networkx {{ networkx }}
        - pandas {{ pandas }}
        - tqdm {{ tqdm }}
        - requests
        - matplotlib-base
        - boto3 {{ boto3 }}
        - {{ pin_subpackage('autogluon.common', exact=True) }}
        # Extra group "all". autogluon requires autogluon.core[all].
        - ray-default >=2.10.0,<2.38      # increasing upperbound like conda-forge
        - ray-tune >=2.10.0,<2.38         # increasing upperbound like conda-forge
        - hyperopt >=0.2.7,<0.2.8
    test:
      source_files:
        - core/tests
      imports:
        - autogluon.core
      requires:
        - pip
        - pytest
      commands:
        - pip check
        - cd core
        # Skip test_check_style because it runs linters. We don't need to run linters.
        # test_dynamic_resource_allocation can fail when there isn't enough memory available.
        - pytest -v tests -k "not (test_check_style or test_dynamic_resource_allocation)"
        - python -c "import autogluon.core.version; assert autogluon.core.version.__version__ == '{{ version }}'"

  - name: {{ name }}.features
    build:
      script: python -m pip install ./features -v --no-deps --no-build-isolation
      script_env:
        RELEASE=1
    requirements:
      host:
        - python
        - pip
        - setuptools
        - wheel
      run:
        - python
        - numpy {{ numpy }}
        - pandas {{ pandas }}
        - scikit-learn {{ scikit_learn }}
        - {{ pin_subpackage('autogluon.common', exact=True) }}
    test:
      source_files:
        - features/tests
      imports:
        - autogluon.features
      requires:
        - pip
        - pytest
      commands:
        - pip check
        - cd features
        # Skip test_check_style because it runs linters. We don't need to run linters.
        - pytest -v tests -k "not test_check_style"
        - python -c "import autogluon.features.version; assert autogluon.features.version.__version__ == '{{ version }}'"

  - name: {{ name }}.multimodal
    build:
      script: python -m pip install ./multimodal -v --no-deps --no-build-isolation
      script_env:
        RELEASE=1
    requirements:
      host:
        - python
        - pip
        - setuptools
        - wheel
      run:
        - python
        - numpy {{ numpy }}
        - scipy {{ scipy }}
        - pandas {{ pandas }}
        - scikit-learn {{ scikit_learn }}
        - Pillow {{ Pillow }}
        - tqdm {{ tqdm }}
        - boto3 {{ boto3 }}
        - pytorch {{ pytorch }}
        - pytorch-lightning {{ lightning }}
        ## transformers[sentencepiece] ##
        - transformers {{ transformers }}
        - sentencepiece {{ sentencepiece }}
        - protobuf
        ## transformers[sentencepiece] ##
        - huggingface_accelerate {{ huggingface_accelerate }}
        - requests >=2.21,<3
        - jsonschema >=4.18,<4.22
        - seqeval >=1.2.2,<1.3.0
        - evaluate >=0.4.0,<0.5.0
        - timm >=0.9.5,<0.10.0
        - torchvision >=0.16.0,<0.19.0
        - scikit-image >=0.19.1,<0.21.0
        - text-unidecode >=1.3,<1.4
        - torchmetrics >=1.2.0,<1.3.0
        - nptyping >=1.4.4,<2.5.0
        # Deviating from upstream. omegaconf-2.2.3 isn't fully compatible with Python 3.11.
        # conda-forge does the same thing.
        - omegaconf >=2.1.1,<2.4.0
        - {{ pin_subpackage('autogluon.core', exact=True) }}
        - {{ pin_subpackage('autogluon.features', exact=True) }}
        - {{ pin_subpackage('autogluon.common', exact=True) }}
        - pytorch-metric-learning >=1.3.0,<2.4
        - nlpaug >=1.1.10,<1.2.0
        - nltk >=3.4.5,<4.0.0
        - openmim >=0.3.7,<0.4.0
        - defusedxml >=0.7.1,<0.7.2
        - jinja2 >=3.0.3,<3.2
        - tensorboard >=2.9,<3
        - pytesseract >=0.3.9,<0.3.11
        # nvidia-ml-py3 is deprecated and not imported in autogluon (no mention of pynvml anywhere)
        #- nvidia-ml-py3 7.352.0
        - pdf2image >=1.17.0,<1.19
    test:
      imports:
        - autogluon.multimodal
      requires:
        - pip
      commands:
        - pip check
        # Tests are very slow. Just skip them
        #- cd multimodal
        #- pytest -v tests -k "not test_check_style" -m "not slow"
        - python -c "import autogluon.multimodal.version; assert autogluon.multimodal.version.__version__ == '{{ version }}'"

  - name: {{ name }}.tabular
    build:
      script: python -m pip install ./tabular -v --no-deps --no-build-isolation
      script_env:
        RELEASE=1
    requirements:
      host:
        - python
        - pip
        - setuptools
        - wheel
      run:
        - python
        - numpy {{ numpy }}
        - scipy {{ scipy }}
        - pandas {{ pandas }}
        - scikit-learn {{ scikit_learn }}
        - networkx {{ networkx }}
        - {{ pin_subpackage('autogluon.core', exact=True) }}
        - {{ pin_subpackage('autogluon.features', exact=True) }}
        # Extra group "all". autogluon requires autogluon.tabular[all].
        - lightgbm >=3.3,<4.4
        - catboost >=1.1,<1.3
        - xgboost >=1.6,<2.1
        - pytorch {{ pytorch }}
        - fastai >=2.3.1,<2.8
    test:
      imports:
        - autogluon.tabular
      requires:
        - pip
      requires:
        - pip
      commands:
        - pip check
        # These tests are very very slow, so skip them.
        #- cd tabular
        #- pytest -v tests -k "not test_check_style" -m "not slow" --ignore=tests/regressiontests
        - python -c "import autogluon.tabular.version; assert autogluon.tabular.version.__version__ == '{{ version }}'"

  - name: {{ name }}.timeseries
    build:
      script: python -m pip install ./timeseries -v --no-deps --no-build-isolation
      script_env:
        RELEASE=1
    requirements:
      host:
        - python
        - pip
        - setuptools
        - wheel
      run:
        - python
        - joblib >=1.1,<2
        - numpy {{ numpy }}
        - scipy {{ scipy }}
        - pandas {{ pandas }}
        - pytorch {{ pytorch }}
        - pytorch-lightning {{ lightning }}
        ## transformers[sentencepiece] ##
        - transformers {{ transformers }}
        - sentencepiece {{ sentencepiece }}
        - protobuf
        ## transformers[sentencepiece] ##
        - huggingface_accelerate {{ huggingface_accelerate }}
        - gluonts ==0.15.1
        - networkx {{ networkx }}
        - statsforecast >=1.4.0,<1.5
        - mlforecast >=0.10.0,<0.10.1
        - utilsforecast >=0.0.10,<0.0.11
        - tqdm {{ tqdm }}
        - orjson >=3.9,<4
        - tensorboard >=2.9,<3
        - {{ pin_subpackage('autogluon.core', exact=True) }}
        - {{ pin_subpackage('autogluon.common', exact=True) }}
        - {{ pin_subpackage('autogluon.tabular', exact=True) }}
        # Extra group "all". autogluon requires autogluon.timeseries[all].
        - optimum >=1.17,<1.19
        - onnx
        - onnxruntime >=1.11.0
        - datasets >=1.2.1
        - evaluate
        - protobuf >=3.20.1
    test:
      source_files:
        - timeseries/tests
      imports:
        - autogluon.timeseries
      requires:
        - pip
        - pytest
        - flaky
        - pytest-timeout
      commands:
        - pip check
        - cd timeseries
        # Only running smoketests because the other tests are very slow in Prefect. Though,
        # it is highly recommended to run the tests locally!
        - pytest -v tests/smoketests -k "not test_check_style" -m "not slow"
        - python -c "import autogluon.timeseries.version; assert autogluon.timeseries.version.__version__ == '{{ version }}'"

about:
  home: https://auto.gluon.ai/
  summary: "AutoML for Image, Text, Time Series, and Tabular Data"
  description: AutoGluon automates machine learning tasks enabling you to easily achieve strong predictive performance in your applications. With just a few lines of code, you can train and deploy high-accuracy machine learning and deep learning models on image, text, time series, and tabular data.
  license: Apache-2.0
  license_family: Apache
  license_file:
    - LICENSE
    - NOTICE
  dev_url: https://github.com/autogluon/autogluon
  doc_url: https://auto.gluon.ai/
